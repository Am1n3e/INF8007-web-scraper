# onjour à tous,

# Certain m'ont demandé plus de précision sur ce qui était à remettre pour la seconde remise du projet. voici donc un récapitulatif plus détaillé de la grille de correction

# Web scrapping & web cralling (5 points)
# Réévaluation de ce qui a été fait dans la première remise. Je m'attend à ce que vous régliez les commentaires et les endroits ou vous avez perdu des points.
# pour ces 5 points, la grille sera la même que les 10 premiers points de la première remise.

# From email
# TODO For the output: " ".join(dead_links) par "\n".join(dead_links)
# TODO votre regex manque mes test parce qu'il ne permet pas à l'url d'avoir un numéro de port (et mon url test est "localhost:3000")


# qualité du projet (5 points)
# Exactement la même grille que la première remise, c'est à dire :
# - Git :
# 1 : si vous remettez le .git de votre projet.
# 0.5 : vous remettez le .git de votre projet, mais il y a des irrégularités (message de commit peu instructif, un seul commit pour tous le travail, etc.)
# 0 : vous ne remettez pas le .git de votre projet.
# - README :
# 1 : votre README est présent et indique comment utiliser le projet
# 0,75 : votre README est présent mais a de petite erreurs dans les indications
# 0 : pas de README
# - Linter :
# 1 : vous avez inclus le fichier de configuration de votre linter dans votre projet ou vous avez indiqué dans le README quel outils vous avez utilisé et quel environnement.
# 0 : aucune indication de Linter
# - Typage de code :
# 1: vous avez inclus dans le code des type hints sur certaine de vos fonctions ou variable. pour ceux qui sont forcé d'utilisé python a une version antérieur à 3.5 (ou qui veulent plus d'indication sur les type hints en général) j'ai trouvé une ressource intéressante à ce sujet : https://www.bernat.tech/the-state-of-type-hints-in-python/.
# 0 : aucun type hint.
# - Commentaire :
# 1: le code contient quelque commentaire aidant à la lecture du code. les meilleurs commentaires expliques l'usage général de bloque de code ou donne des indications sur la raison d'un choix dans le code.
# 0.5 : le code contient TROP de cmai par ligne est trop) ou encore, les commentaires donne de fausse information sur le code.

# gestion des arguments (5 points)
# chacune des exigences suivantes sera évaluer selon l'échelle
# 1 : ça fonctionne
# 0,75-0,5 : ça fonctionne partiellement.
# 0 : Feature complètement absent ou non fonctionnelle

# -  votre script accepte un argument pour indiquer un url a vérifier (1 point)
# -  votre script accepte un argument pour indiquer un fichier local à parser. Il ne pourra évidemment pas avoir de crawling dans ce contexte puisqu'on n'a pas de nom de domaine à vérifier (1 point)
# -  votre script accepte  un argument pour activé/désactiver le crawling. (c'est l'équivalent de faire une recherche à profondeur 1) (1 point)
# noter que je ne demande pas la forme des arguments (positionnelle vs nomé). vous pouvez les combiner, les divisé, les mélanger, peu importe. l'important est que ce soit documenté et que la possibilité existes.

# - votre script accepte des données en stdin selon les 3 formes suivantes (2 points) :
# chaque exigence ici vaux 1/2 point.
# le std:in peut être une page HTML a crawler
# le std:in peut être une liste de site web à vérifier
# le std:in peut être une liste de fichier à vérifier
# un argument peut être utilisé pour différencier le type d'entré std:in attendu

# script bash (5 points)
# chacune des 5 exigences vaux un points :
# le script bash doit accepter un url vers un repertoire git en argument.
# le script bash doit accepter un argument pour indiquer le port ou rouler le programme et la variable d'environnement PORT
# le script bash doit cloner le git, installer les dépendence node (npm install)
# le script bash doit partir le serveur node localement (npm start) en spécifiant le port (la variable d'environnement se nomme PORT)
# le script bash doit exécuter votre programme sur le serveur node local (http://localhost) en vérifiant le bon port.
# utilisation de concept du fonctionnel (5 points)
# Identifier à l'aide d'un commentaire toutes les fonctions pure sun'y en a pas, extrayez 3 morceau de code et créer des fonctions pure avec celle-ci
# - 5 points : toutes les fonctions pure ont été identifié
# - 1-4 points : certaine fonctions pure ne sont pas identifier ou certaine fonctions sont faussement identifier comme pur
# - 0 points : aucune fonction pur n'a été identifier.

# gestion d'erreur (5 points)
# - Tous les messages d'erreurs (échec du programme, trace, etc) sont envoyé dans le std:err plutôt que le std:out. (2 points)
# - Le programme est résilient au erreur et au entré malformé. les entrés invalides sont affiché sous forme de message d'erreur et n'arrête pas l'exécution du programme lorsque c'est possible. (3 points)


# Afin de ne pas pénaliser ceux qui avait fait la dernière exigence (utilisé un Monad Maybe ou Either pour la gestion d'erreur), Je donnerai 1 points bonus a ceux qui rempliront cette exigences. Mais noter qu'il s'agit d'une exigence optionnelle. il est possible d'avoir 100% sans la remplir.

# N'hésité pas a m'envoyer vos questiosuns par courriel si des questions persistent.
